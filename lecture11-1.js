// 11-1 에러 핸들링
// 에러 발생 대비하지 않으면 프로그램 종료

// 1. 자바스크립트의 에러 핸들링
// 1) try ... catch 문
console.log("에러 발생 전");

try {
  (3).split(""); // 여기서 오류 나긴 남 ( 안전장치 ) , 전체 프로그램 멈추지는 않음
} catch (e) {
  console.error("🛑 에러!!", e); // 에러 어디서 났는지 알려줌
}

console.log("에러 발생 후");

// try 블록
// 에러 발생 여지가 있는 코드 포함
// 이곳에서 발생한 에러는 프로그램을 멈추지 않음
// catch 블록
// 에러 발생시 실행할 코드 포함
// 발생한 오류 객체를 인자로 받음

// 2) try ... catch ... finally 문
// finally 블록
// 오류가 발생 여부와 관계없이 한 번 실행되는 코드 포함
// 아래와 같은 경우 널리 사용

// 2. Error 객체
// 에러 발생 시 던져지는 thrown 객체
// 에러에 대한 정보를 담고 있음
// 💡 에러가 발생하지 않아도, 직접 생성하여 던지기 가능

// 1) 기본 생성과 사용법
const error = new Error("뭔가 잘못됐어");

console.error(error); // 에러로 뭔가 잘못됐어가 출력

// 3. 에러 버블링 error bubbling
// 다른 함수를 호출했을 때
// 에러 발생시 해당 함수에서 잡지 않으면 호출한 곳으로 던져짐
// 다중 호출시 에러를 핸들링하는 코드가 있는 호출자까지 전달됨
